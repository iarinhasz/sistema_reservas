
services:
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api_reservas
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    env_file:
      - ./.env
    depends_on:
      - db
      - mailhog

  db:
    build:
      context: .
      dockerfile: ./postgres/Dockerfile
    container_name: db_reservas
    env_file:
      - ./.env
    
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

    volumes:

      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql

      # Mantém os dados do banco salvos entre reinicializações
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog_reservas
    ports:
      - "1025:1025"
      - "8025:8025"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_reservas
    ports:
      - "5173:5173"
    volumes:
      # Mapeia o código do frontend para o live-reload
      - ./frontend:/app
      # Isola o node_modules dentro do container
      - /app/node_modules
    depends_on:
      - app

volumes:
  postgres_data: